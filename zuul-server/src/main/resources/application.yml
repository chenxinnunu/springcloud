server:
#把zuul的多个节点注册到Eureka商家就实现了高可用，与其他服务的高可用没有什么区别
#Zuul客户端会自动从EurekaServer中查询ZuulServer的列表，并使用Ribbo负载均衡的请求Zuul集群
#当Zuul客户端未注册到Eureka上时，可使用Nginx等实现负载均衡
  port: 8500
spring:
  application:
    name: zuul-server
eureka:
  client:
    serviceUrl:
      defaultZone: http://admin:123456@peer1:8000/eureka/,http://admin:123456@peer2:8001/eureka/
  instance:
    prefer-ip-address: true
zuul:
  # 该配置表示哪些敏感头不传递到服务组件，更多详细请看文档
  #sensitiveHeaders: Cookie,Set-Cookie,Authorization #默认就是这三个
  #忽略微服务，多个用逗号分隔,如果用"*"，表示忽略所有微服务，但是如果有routes，会只路由routes中的服务
  #ignored-services: customer-server,prouder-server
  #忽略所有包含/admin/的路径，也会忽略routes中服务包含的/admin/中的路径
  #ignored-patterns: /**/admin/**
  #自定义指定微服务的访问路径
  routes:
    #这样访问http://localhsot:8500/customer-server就可以写成http://localhost:8500/user **表示后面的路径不变，匹配所有
    customer-server: /user/**
  #更多路由配置，请看资料
  host:
  #zuul超时时间
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000
management:
  endpoints:
    web:
      exposure:
        include: hystrix.stream
#熔断超时时间，上传大文件时最好配置上,虽然看起来不能配置，但是确实生效
hystrix:
  command:
   default:
    execution:
      isolation:
        thread:
          timeoutInMilliseconds: 250000
#负载均衡超时时间，上传大文件时最好配上
ribbon:
  eureka:
    enabled: true
  ReadTimeout: 3000
  ConnectTimeout: 3000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1
  OkToRetryOnAllOperations: false
security:
  oauth2:
    client:
      client-id: client
      client-secret: secret
    resource:
      token-info-uri: http://localhost:8050/oauth/check_token
      service-id: zuul-server